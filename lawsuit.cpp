{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ebf61e1e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2160132137.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31m<ul>\u001b[39m\n    ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "<ul>\n",
    "    {% for Gulf Coast Hospitality LLC in Hospitality %}\n",
    "        <li>{{cop.first_name}}</li>Light house\n",
    "        <li>{{cop.last_name}}</li>Padre South hotel\n",
    "        <li>{{cop.email}}</li>Super 8 hotel\n",
    "    {% endfor %}\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f40df664",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Miscellaneous\n",
    "*.class\n",
    "*.lock\n",
    "*.log\n",
    "*.pyc\n",
    "*.swp\n",
    ".buildlog/\n",
    ".history\n",
    "\n",
    "\n",
    "\n",
    "# Flutter repo-specific\n",
    "/bin/cache/\n",
    "/bin/internal/bootstrap.bat\n",
    "/bin/internal/bootstrap.sh\n",
    "/bin/mingit/\n",
    "/dev/benchmarks/mega_gallery/\n",
    "/dev/bots/.recipe_deps\n",
    "/dev/bots/android_tools/\n",
    "/dev/devicelab/ABresults*.json\n",
    "/dev/docs/doc/\n",
    "/dev/docs/flutter.docs.zip\n",
    "/dev/docs/lib/\n",
    "/dev/docs/pubspec.yaml\n",
    "/dev/integration_tests/**/xcuserdata\n",
    "/dev/integration_tests/**/Pods\n",
    "/packages/flutter/coverage/\n",
    "version\n",
    "analysis_benchmark.json\n",
    "\n",
    "# packages file containing multi-root paths\n",
    ".packages.generated\n",
    "\n",
    "# Flutter/Dart/Pub related\n",
    "**/doc/api/\n",
    ".dart_tool/\n",
    ".flutter-plugins\n",
    ".flutter-plugins-dependencies\n",
    "**/generated_plugin_registrant.dart\n",
    ".packages\n",
    ".pub-preload-cache/\n",
    ".pub/\n",
    "build/\n",
    "flutter_*.png\n",
    "linked_*.ds\n",
    "unlinked.ds\n",
    "unlinked_spec.ds\n",
    "\n",
    "# Android related\n",
    "**/android/**/gradle-wrapper.jar\n",
    ".gradle/\n",
    "**/android/captures/\n",
    "**/android/gradlew\n",
    "**/android/gradlew.bat\n",
    "**/android/local.properties\n",
    "**/android/**/GeneratedPluginRegistrant.java\n",
    "**/android/key.properties\n",
    "*.jks\n",
    "\n",
    "# iOS/XCode related\n",
    "**/ios/**/*.mode1v3\n",
    "**/ios/**/*.mode2v3\n",
    "**/ios/**/*.moved-aside\n",
    "**/ios/**/*.pbxuser\n",
    "**/ios/**/*.perspectivev3\n",
    "**/ios/**/*sync/\n",
    "**/ios/**/.sconsign.dblite\n",
    "**/ios/**/.tags*\n",
    "**/ios/**/.vagrant/\n",
    "**/ios/**/DerivedData/\n",
    "**/ios/**/Icon?\n",
    "**/ios/**/Pods/\n",
    "**/ios/**/.symlinks/\n",
    "**/ios/**/profile\n",
    "**/ios/**/xcuserdata\n",
    "**/ios/.generated/\n",
    "**/ios/Flutter/.last_build_id\n",
    "**/ios/Flutter/App.framework\n",
    "**/ios/Flutter/Flutter.framework\n",
    "**/ios/Flutter/Flutter.podspec\n",
    "**/ios/Flutter/Generated.xcconfig\n",
    "**/ios/Flutter/ephemeral\n",
    "**/ios/Flutter/app.flx\n",
    "**/ios/Flutter/app.zip\n",
    "**/ios/Flutter/flutter_assets/\n",
    "**/ios/Flutter/flutter_export_environment.sh\n",
    "**/ios/ServiceDefinitions.json\n",
    "**/ios/Runner/GeneratedPluginRegistrant.*\n",
    "\n",
    "# macOS\n",
    "**/Flutter/ephemeral/\n",
    "**/Pods/\n",
    "**/macos/Flutter/GeneratedPluginRegistrant.swift\n",
    "**/macos/Flutter/ephemeral\n",
    "**/xcuserdata/\n",
    "\n",
    "# Windows\n",
    "**/windows/flutter/generated_plugin_registrant.cc\n",
    "**/windows/flutter/generated_plugin_registrant.h\n",
    "**/windows/flutter/generated_plugins.cmake\n",
    "\n",
    "# Linux\n",
    "**/linux/flutter/generated_plugin_registrant.cc\n",
    "**/linux/flutter/generated_plugin_registrant.h\n",
    "**/linux/flutter/generated_plugins.cmake\n",
    "\n",
    "# Coverage\n",
    "coverage/\n",
    "\n",
    "# Symbols\n",
    "app.*.symbols\n",
    "\n",
    "# Exceptions to above rules.\n",
    "!**/ios/**/default.mode1v3\n",
    "!**/ios/**/default.mode2v3\n",
    "!**/ios/**/default.pbxuser\n",
    "!**/ios/**/default.perspectivev3\n",
    "!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n",
    "!/dev/ci/**/Gemfile.lock"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b4f29b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "package Crawler\n",
    "\n",
    "import (\n",
    "\t\"errors\"\n",
    "\t\"github.com/antchfx/htmlquery\"\n",
    "\t\"github.com/tebeka/selenium\"\n",
    "\t\"log\"\n",
    "\t\"strings\"\n",
    "\t\"time\"\n",
    ")\n",
    "\n",
    "const (\n",
    "\tbtnPetition      = \"//*[@id=\\\"pbPeticionar\\\"]\"\n",
    "\ttitleActivePole  = \"Polo ativo\"\n",
    "\ttitlePassivePole = \"Polo passivo\"\n",
    "\ttitleOthersPole  = \"Outras participações \"\n",
    "\txpathTitleInit   = \"/html/body/span/main/div/div/div/form/div/div/div[2]/div/div/section\"\n",
    "\txpathNameInit    = \"/div/div[2]/div/div/ng-include/div/div/div/div/div\"\n",
    "\txpathName        = \"/span[1]\"\n",
    "\txpathDocument    = \"/span[2]\"\n",
    ")\n",
    "\n",
    "type Poles struct {\n",
    "\tActive  []Part\n",
    "\tPassive []Part\n",
    "\tOther   []Part\n",
    "}\n",
    "\n",
    "type Part struct {\n",
    "\tType     string\n",
    "\tName     string\n",
    "\tDocument string\n",
    "}\n",
    "\n",
    "func getLawsuitPoles(driver selenium.WebDriver) (Poles, error) {\n",
    "\tbtnViewDocuments, err := driver.FindElement(selenium.ByXPATH, btnPetition)\n",
    "\tif err != nil {\n",
    "\t\treturn Poles{}, errors.New(\"btnPetition not found\")\n",
    "\t}\n",
    "\terr = btnViewDocuments.Click()\n",
    "\n",
    "\ttime.Sleep(4 * time.Second)\n",
    "\n",
    "\tpageSource, err := driver.PageSource()\n",
    "\tif err != nil {\n",
    "\t\treturn Poles{}, errors.New(\"could not get page source\")\n",
    "\t}\n",
    "\n",
    "\thtmlPgSrc, err := htmlquery.Parse(strings.NewReader(pageSource))\n",
    "\tif err != nil {\n",
    "\t\treturn Poles{}, errors.New(\"could not convert string to node html\")\n",
    "\t}\n",
    "\n",
    "\tvar activePole []Part\n",
    "\tvar passivePole []Part\n",
    "\tvar otherPole []Part\n",
    "\texistCard := htmlquery.Find(htmlPgSrc, xpathTitleInit)\n",
    "\n",
    "\tif len(existCard) > 0 {\n",
    "\t\tcards := htmlquery.Find(htmlPgSrc, xpathTitleInit)\n",
    "\n",
    "\t\tfor i := 0; i < len(cards); i++ {\n",
    "\t\t\ttitle := htmlquery.FindOne(cards[i], \"/div/div[1]/h3\")\n",
    "\t\t\tif htmlquery.InnerText(title) == titleActivePole {\n",
    "\t\t\t\tnames := htmlquery.Find(cards[i], xpathNameInit)\n",
    "\t\t\t\tfor _, name := range names {\n",
    "\t\t\t\t\tvar n string\n",
    "\t\t\t\t\tvar d string\n",
    "\t\t\t\t\texistName := htmlquery.Find(name, xpathName)\n",
    "\t\t\t\t\tif len(existName) > 0 && !strings.Contains(htmlquery.InnerText(htmlquery.FindOne(name, xpathName)), \"Incluir no polo contrário\") {\n",
    "\t\t\t\t\t\tn = htmlquery.InnerText(htmlquery.FindOne(name, xpathName))\n",
    "\t\t\t\t\t\texistDocument := htmlquery.Find(name, xpathDocument)\n",
    "\t\t\t\t\t\tif len(existDocument) > 0 {\n",
    "\t\t\t\t\t\t\td = htmlquery.InnerText(htmlquery.FindOne(name, xpathDocument))\n",
    "\t\t\t\t\t\t}\n",
    "\t\t\t\t\t\tactivePole = append(activePole, Part{\n",
    "\t\t\t\t\t\t\tType:     \"Ativo\",\n",
    "\t\t\t\t\t\t\tName:     n,\n",
    "\t\t\t\t\t\t\tDocument: d,\n",
    "\t\t\t\t\t\t})\n",
    "\t\t\t\t\t}\n",
    "\n",
    "\t\t\t\t}\n",
    "\t\t\t}\n",
    "\t\t\tif htmlquery.InnerText(title) == titlePassivePole {\n",
    "\t\t\t\tnames := htmlquery.Find(cards[i], xpathNameInit)\n",
    "\t\t\t\tfor _, name := range names {\n",
    "\t\t\t\t\tvar n string\n",
    "\t\t\t\t\tvar d string\n",
    "\t\t\t\t\texistName := htmlquery.Find(name, xpathName)\n",
    "\t\t\t\t\tif len(existName) > 0 && !strings.Contains(htmlquery.InnerText(htmlquery.FindOne(name, xpathName)), \"Incluir no polo contrário\") {\n",
    "\t\t\t\t\t\tn = htmlquery.InnerText(htmlquery.FindOne(name, xpathName))\n",
    "\t\t\t\t\t\texistDocument := htmlquery.Find(name, xpathDocument)\n",
    "\t\t\t\t\t\tif len(existDocument) > 0 {\n",
    "\t\t\t\t\t\t\td = htmlquery.InnerText(htmlquery.FindOne(name, xpathDocument))\n",
    "\t\t\t\t\t\t}\n",
    "\t\t\t\t\t\tpassivePole = append(passivePole, Part{\n",
    "\t\t\t\t\t\t\tType:     \"Passivo\",\n",
    "\t\t\t\t\t\t\tName:     n,\n",
    "\t\t\t\t\t\t\tDocument: d,\n",
    "\t\t\t\t\t\t})\n",
    "\t\t\t\t\t}\n",
    "\n",
    "\t\t\t\t}\n",
    "\t\t\t}\n",
    "\t\t\tif strings.Contains(htmlquery.InnerText(title), titleOthersPole) {\n",
    "\t\t\t\tnames := htmlquery.Find(cards[i], xpathNameInit)\n",
    "\t\t\t\tfor _, name := range names {\n",
    "\t\t\t\t\tvar n string\n",
    "\t\t\t\t\tvar d string\n",
    "\t\t\t\t\texistName := htmlquery.Find(name, xpathName)\n",
    "\n",
    "\t\t\t\t\tif len(existName) > 0 && !strings.Contains(htmlquery.InnerText(htmlquery.FindOne(name, xpathName)), \"Incluir no polo contrário\") {\n",
    "\t\t\t\t\t\tn = htmlquery.InnerText(htmlquery.FindOne(name, xpathName))\n",
    "\t\t\t\t\t\texistDocument := htmlquery.Find(name, xpathDocument)\n",
    "\t\t\t\t\t\tif len(existDocument) > 0 {\n",
    "\t\t\t\t\t\t\td = htmlquery.InnerText(htmlquery.FindOne(name, xpathDocument))\n",
    "\t\t\t\t\t\t}\n",
    "\t\t\t\t\t\totherPole = append(otherPole, Part{\n",
    "\t\t\t\t\t\t\tType:     \"Outros\",\n",
    "\t\t\t\t\t\t\tName:     n,\n",
    "\t\t\t\t\t\t\tDocument: d,\n",
    "\t\t\t\t\t\t})\n",
    "\t\t\t\t\t}\n",
    "\n",
    "\t\t\t\t}\n",
    "\t\t\t}\n",
    "\t\t}\n",
    "\t} else {\n",
    "\t\tlog.Println(\"no parts were found\")\n",
    "\t\treturn Poles{}, nil\n",
    "\t}\n",
    "\n",
    "\treturn Poles{activePole, passivePole, otherPole}, nil\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c8cc1a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "main.css"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82b95c46",
   "metadata": {},
   "outputs": [],
   "source": [
    "package Crawler\n",
    "\n",
    "import (\n",
    "\t\"github.com/antchfx/htmlquery\"\n",
    "\t\"golang.org/x/net/html\"\n",
    "\t\"strings\"\n",
    ")\n",
    "\n",
    "const (\n",
    "\txpathTitleP    = \"//*[@id=\\\"containerDadosPrincipaisProcesso\\\"]/div[1]/div/div/span[1]\"\n",
    "\txpathTitleS    = \"//*[@id=\\\"numeroProcesso\\\"]\"\n",
    "\txpathTagP      = \"//*[@id=\\\"containerDadosPrincipaisProcesso\\\"]/div[1]/div/div/span[2]\"\n",
    "\txpathTagS      = \"//*[@id=\\\"situacaoProcesso\\\"]\"\n",
    "\txpathClassP    = \"//*[@id=\\\"classeProcesso\\\"]\"\n",
    "\txpathClassS    = \"//*[@id=\\\"classeProcesso\\\"]/span\"\n",
    "\txpathSubjectP  = \"//*[@id=\\\"assuntoProcesso\\\"]\"\n",
    "\txpathSubjectS  = \"//*[@id=\\\"assuntoProcesso\\\"]/span\"\n",
    "\txpathLocationP = \"//*[@id=\\\"foroProcesso\\\"]\"\n",
    "\txpathLocationS = \"//*[@id=\\\"secaoProcesso\\\"]/span\"\n",
    "\txpathUnitP     = \"//*[@id=\\\"varaProcesso\\\"]\"\n",
    "\txpathUnitS     = \"//*[@id=\\\"orgaoJulgadorProcesso\\\"]/span\"\n",
    "\txpathJudgeP    = \"//*[@id=\\\"juizProcesso\\\"]\"\n",
    "\txpathJudgeS    = \"//*[@id=\\\"relatorProcesso\\\"]/span\"\n",
    "\txpathInitDate  = \"//*[@id=\\\"dataHoraDistribuicaoProcesso\\\"]\"\n",
    "\txpathControl   = \"//*[@id=\\\"numeroControleProcesso\\\"]\"\n",
    "\txpathFieldP    = \"//*[@id=\\\"areaProcesso\\\"]/span\"\n",
    "\txpathFieldS    = \"//*[@id=\\\"areaProcesso\\\"]/span\"\n",
    "\txpathValueP    = \"//*[@id=\\\"valorAcaoProcesso\\\"]\"\n",
    "\txpathValueS    = \"//*[@id=\\\"valorAcaoProcesso\\\"]/span\"\n",
    ")\n",
    "\n",
    "type LawsuitCover struct {\n",
    "\tTitle       string\n",
    "\tTag         string\n",
    "\tClass       string\n",
    "\tSubject     string\n",
    "\tLocation    string\n",
    "\tUnit        string\n",
    "\tJudge       string\n",
    "\tInitialDate string\n",
    "\tControl     string\n",
    "\tField       string\n",
    "\tValue       string\n",
    "}\n",
    "\n",
    "func GetLawsuitCover(htmlPgSrc *html.Node, degree string) (LawsuitCover, error) {\n",
    "\tvar title string\n",
    "\tvar tag string\n",
    "\tvar class string\n",
    "\tvar subject string\n",
    "\tvar location string\n",
    "\tvar unit string\n",
    "\tvar judge string\n",
    "\tvar initDate string\n",
    "\tvar control string\n",
    "\tvar field string\n",
    "\tvar value string\n",
    "\n",
    "\tif degree == \"p\" {\n",
    "\t\texistTitle := htmlquery.Find(htmlPgSrc, xpathTitleP)\n",
    "\t\tif len(existTitle) > 0 {\n",
    "\t\t\ttitle = strings.Replace(htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathTitleP)), \"                                                            \", \"\", -1)\n",
    "\t\t}\n",
    "\n",
    "\t\texistTag := htmlquery.Find(htmlPgSrc, xpathTagP)\n",
    "\t\tif len(existTag) > 0 {\n",
    "\t\t\ttag = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathTagP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistClass := htmlquery.Find(htmlPgSrc, xpathClassP)\n",
    "\t\tif len(existClass) > 0 {\n",
    "\t\t\tclass = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathClassP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistSubject := htmlquery.Find(htmlPgSrc, xpathSubjectP)\n",
    "\t\tif len(existSubject) > 0 {\n",
    "\t\t\tsubject = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathSubjectP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistLocation := htmlquery.Find(htmlPgSrc, xpathLocationP)\n",
    "\t\tif len(existLocation) > 0 {\n",
    "\t\t\tlocation = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathLocationP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistUnit := htmlquery.Find(htmlPgSrc, xpathUnitP)\n",
    "\t\tif len(existUnit) > 0 {\n",
    "\t\t\tunit = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathUnitP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistJudge := htmlquery.Find(htmlPgSrc, xpathJudgeP)\n",
    "\t\tif len(existJudge) > 0 {\n",
    "\t\t\tjudge = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathJudgeP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistInitDate := htmlquery.Find(htmlPgSrc, xpathInitDate)\n",
    "\t\tif len(existInitDate) > 0 {\n",
    "\t\t\tinitDate = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathInitDate))\n",
    "\t\t}\n",
    "\n",
    "\t\texistControl := htmlquery.Find(htmlPgSrc, xpathControl)\n",
    "\t\tif len(existControl) > 0 {\n",
    "\t\t\tcontrol = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathControl))\n",
    "\t\t}\n",
    "\n",
    "\t\texistField := htmlquery.Find(htmlPgSrc, xpathFieldP)\n",
    "\t\tif len(existField) > 0 {\n",
    "\t\t\tfield = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathFieldP))\n",
    "\t\t}\n",
    "\n",
    "\t\texistValueOrigin := htmlquery.Find(htmlPgSrc, xpathValueP)\n",
    "\t\tif len(existValueOrigin) > 0 {\n",
    "\t\t\tvalueOrigin := htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathValueP))\n",
    "\t\t\tvOrinSplit := strings.Split(valueOrigin, \"R$         \")\n",
    "\t\t\tif len(vOrinSplit) > 1 {\n",
    "\t\t\t\tvalue = vOrinSplit[1]\n",
    "\t\t\t} else {\n",
    "\t\t\t\tvalue = vOrinSplit[0]\n",
    "\t\t\t}\n",
    "\n",
    "\t\t}\n",
    "\n",
    "\t} else {\n",
    "\t\texistTitle := htmlquery.Find(htmlPgSrc, xpathTitleS)\n",
    "\t\tif len(existTitle) > 0 {\n",
    "\t\t\ttitle = strings.Replace(htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathTitleS)), \"                        \", \"\", -1)\n",
    "\t\t}\n",
    "\n",
    "\t\texistTag := htmlquery.Find(htmlPgSrc, xpathTagS)\n",
    "\t\tif len(existTag) > 0 {\n",
    "\t\t\ttag = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathTagS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistClass := htmlquery.Find(htmlPgSrc, xpathClassS)\n",
    "\t\tif len(existClass) > 0 {\n",
    "\t\t\tclass = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathClassS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistSubject := htmlquery.Find(htmlPgSrc, xpathSubjectS)\n",
    "\t\tif len(existSubject) > 0 {\n",
    "\t\t\tsubject = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathSubjectS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistLocation := htmlquery.Find(htmlPgSrc, xpathLocationS)\n",
    "\t\tif len(existLocation) > 0 {\n",
    "\t\t\tlocation = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathLocationS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistUnit := htmlquery.Find(htmlPgSrc, xpathUnitS)\n",
    "\t\tif len(existUnit) > 0 {\n",
    "\t\t\tunit = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathUnitS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistJudge := htmlquery.Find(htmlPgSrc, xpathJudgeS)\n",
    "\t\tif len(existJudge) > 0 {\n",
    "\t\t\tjudge = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathJudgeS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistField := htmlquery.Find(htmlPgSrc, xpathFieldS)\n",
    "\t\tif len(existField) > 0 {\n",
    "\t\t\tfield = htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathFieldS))\n",
    "\t\t}\n",
    "\n",
    "\t\texistValueOrigin := htmlquery.Find(htmlPgSrc, xpathValueS)\n",
    "\t\tif len(existValueOrigin) > 0 {\n",
    "\t\t\tvalueOrigin := htmlquery.InnerText(htmlquery.FindOne(htmlPgSrc, xpathValueS))\n",
    "\t\t\tvOrinSplit := strings.Split(valueOrigin, \"R$         \")\n",
    "\t\t\tif len(vOrinSplit) > 1 {\n",
    "\t\t\t\tvalue = vOrinSplit[1]\n",
    "\t\t\t} else {\n",
    "\t\t\t\tvalue = vOrinSplit[0]\n",
    "\t\t\t}\n",
    "\t\t}\n",
    "\t}\n",
    "\n",
    "\treturn LawsuitCover{\n",
    "\t\tTitle:       strings.Replace(strings.Replace(title, Dirt, \"\", -1), \"                                                            \", \"\", -1),\n",
    "\t\tTag:         tag,\n",
    "\t\tClass:       class,\n",
    "\t\tSubject:     subject,\n",
    "\t\tLocation:    location,\n",
    "\t\tUnit:        unit,\n",
    "\t\tJudge:       judge,\n",
    "\t\tInitialDate: initDate,\n",
    "\t\tControl:     control,\n",
    "\t\tField:       field,\n",
    "\t\tValue:       value,\n",
    "\t}, nil\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "385b5c20",
   "metadata": {},
   "outputs": [],
   "source": [
    "package Crawler\n",
    "\n",
    "import (\n",
    "\t\"github.com/tebeka/selenium\"\n",
    ")\n",
    "\n",
    "const (\n",
    "\tInitWebSite    = \"https://esaj.tjsp.jus.br/cpo\"\n",
    "\tEndWebSite     = \"g/open.do\"\n",
    "\txpathRecaptcha = \"//*[@id=\\\"headerNmUsuarioLogado\\\"]\"\n",
    ")\n",
    "\n",
    "type EntireLawsuit struct {\n",
    "\tLawsuitNumber string\n",
    "\tWarning       string\n",
    "\tFirstDegree   Lawsuit\n",
    "\tSecondDegree  Lawsuit\n",
    "}\n",
    "\n",
    "type Lawsuit struct {\n",
    "\tWarning   string\n",
    "\tCover     LawsuitCover\n",
    "\tPersons   []Person\n",
    "\tMovements []Movement\n",
    "\tDocuments Document\n",
    "\tPole      Poles\n",
    "}\n",
    "\n",
    "func Craw(driver selenium.WebDriver, lawsuitNumber string, lawsuitDocument []string, login string, password string) (EntireLawsuit, error) {\n",
    "\tvar e string\n",
    "\n",
    "\tdegree := \"p\"\n",
    "\tsearchLink := InitWebSite + degree + EndWebSite\n",
    "\tfdLawsuit, err := SingleCraw(driver, searchLink, lawsuitNumber, lawsuitDocument, degree, login, password)\n",
    "\tif err != nil {\n",
    "\t\te += \"primeiro \" + err.Error()\n",
    "\t}\n",
    "\n",
    "\tdegree = \"s\"\n",
    "\tsearchLink = InitWebSite + degree + EndWebSite\n",
    "\tsdLawsuit, err := SingleCraw(driver, searchLink, lawsuitNumber, lawsuitDocument, degree, login, password)\n",
    "\tif err != nil {\n",
    "\t\te += \"segundo \" + err.Error()\n",
    "\t}\n",
    "\n",
    "\treturn EntireLawsuit{\n",
    "\t\tWarning:       e,\n",
    "\t\tLawsuitNumber: lawsuitNumber,\n",
    "\t\tFirstDegree:   fdLawsuit,\n",
    "\t\tSecondDegree:  sdLawsuit,\n",
    "\t}, nil\n",
    "}\n",
    "\n",
    "func SingleCraw(driver selenium.WebDriver, searchLink string, lawsuit string, lawsuitDocument []string, degree string, login string, password string) (Lawsuit, error) {\n",
    "\thtmlPgSrc, err := SearchLawsuit(driver, searchLink, lawsuit, degree, login, password)\n",
    "\tif err != nil {\n",
    "\t\treturn Lawsuit{\n",
    "\t\t\tWarning:   err.Error(),\n",
    "\t\t\tCover:     LawsuitCover{},\n",
    "\t\t\tPersons:   nil,\n",
    "\t\t\tMovements: nil,\n",
    "\t\t}, nil\n",
    "\t}\n",
    "\n",
    "\tsecrecy := GetSecrecy(htmlPgSrc)\n",
    "\n",
    "\tif secrecy != true {\n",
    "\t\tcover, err := GetLawsuitCover(htmlPgSrc, degree)\n",
    "\t\tif err != nil {\n",
    "\t\t\treturn Lawsuit{}, err\n",
    "\t\t}\n",
    "\n",
    "\t\tpersons, err := GetLawsuitPersons(htmlPgSrc)\n",
    "\t\tif err != nil {\n",
    "\t\t\treturn Lawsuit{}, err\n",
    "\t\t}\n",
    "\n",
    "\t\tmovements, err := GetLawsuitMovements(htmlPgSrc)\n",
    "\t\tif err != nil {\n",
    "\t\t\treturn Lawsuit{}, err\n",
    "\t\t}\n",
    "\n",
    "\t\t//documents, err := GetLawsuitDocuments(driver, degree, lawsuit, lawsuitDocument)\n",
    "\t\t//if err != nil {\n",
    "\t\t//\treturn Lawsuit{\n",
    "\t\t//\t\tWarning:   \"no documents found\",\n",
    "\t\t//\t\tCover:     cover,\n",
    "\t\t//\t\tPersons:   persons,\n",
    "\t\t//\t\tMovements: movements,\n",
    "\t\t//\t\tDocuments: documents,\n",
    "\t\t//\t}, nil\n",
    "\t\t//}\n",
    "\n",
    "\t\tpoles, err := getLawsuitPoles(driver)\n",
    "\t\tif err != nil {\n",
    "\t\t\treturn Lawsuit{\n",
    "\t\t\t\tWarning:   \"no documents found\",\n",
    "\t\t\t\tCover:     cover,\n",
    "\t\t\t\tPersons:   persons,\n",
    "\t\t\t\tMovements: movements,\n",
    "\t\t\t}, nil\n",
    "\t\t}\n",
    "\n",
    "\t\treturn Lawsuit{\n",
    "\t\t\tWarning:   \"\",\n",
    "\t\t\tCover:     cover,\n",
    "\t\t\tPersons:   persons,\n",
    "\t\t\tMovements: movements,\n",
    "\t\t\t//Documents: documents,\n",
    "\t\t\tPole: poles,\n",
    "\t\t}, nil\n",
    "\t}\n",
    "\n",
    "\twarning := \"lawsuit \" + lawsuit + \" is private to persons involved\"\n",
    "\treturn Lawsuit{\n",
    "\t\tWarning:   warning,\n",
    "\t\tCover:     LawsuitCover{},\n",
    "\t\tPersons:   nil,\n",
    "\t\tMovements: nil,\n",
    "\t\tDocuments: Document{},\n",
    "\t\tPole:      Poles{},\n",
    "\t}, nil\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2eaf6f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "package Crawler\n",
    "\n",
    "import (\n",
    "\t\"errors\"\n",
    "\t\"github.com/antchfx/htmlquery\"\n",
    "\t\"golang.org/x/net/html\"\n",
    "\t\"strings\"\n",
    ")\n",
    "\n",
    "const (\n",
    "\txpathMovements = \"//*[@id=\\\"tabelaTodasMovimentacoes\\\"]/tr\"\n",
    "\txpathDate      = \"td[1]\"\n",
    "\txpathTitle     = \"td[3]\"\n",
    "\txpathText      = \"td[3]/span\"\n",
    ")\n",
    "\n",
    "type Movement struct {\n",
    "\tDate  string\n",
    "\tTitle string\n",
    "\tText  string\n",
    "}\n",
    "\n",
    "func GetLawsuitMovements(htmlPgSrc *html.Node) ([]Movement, error) {\n",
    "\tmovements := htmlquery.Find(htmlPgSrc, xpathMovements)\n",
    "\n",
    "\tif len(movements) > 0 {\n",
    "\t\tvar allMovements []Movement\n",
    "\t\tfor _, movement := range movements {\n",
    "\n",
    "\t\t\tvar date string\n",
    "\t\t\tdt := htmlquery.Find(movement, xpathDate)\n",
    "\t\t\tif len(dt) > 0 {\n",
    "\t\t\t\tdate = strings.TrimSpace(strings.Replace(htmlquery.InnerText(htmlquery.FindOne(movement, xpathDate)), Dirt, \"\", -1))\n",
    "\t\t\t}\n",
    "\n",
    "\t\t\tvar title string\n",
    "\t\t\ttt := htmlquery.Find(movement, xpathTitle)\n",
    "\t\t\tif len(tt) > 0 {\n",
    "\t\t\t\ttitle = strings.TrimSpace(strings.Replace(htmlquery.InnerText(htmlquery.FindOne(movement, xpathTitle)), Dirt, \"\", -1))\n",
    "\t\t\t}\n",
    "\n",
    "\t\t\tvar text string\n",
    "\t\t\ttxt := htmlquery.Find(movement, xpathText)\n",
    "\t\t\tif len(txt) > 0 {\n",
    "\t\t\t\ttext = strings.TrimSpace(strings.Replace(htmlquery.InnerText(htmlquery.FindOne(movement, xpathText)), Dirt, \"\", -1))\n",
    "\t\t\t}\n",
    "\n",
    "\t\t\tmv := Movement{\n",
    "\t\t\t\tDate:  date,\n",
    "\t\t\t\tTitle: strings.Replace(strings.Replace(title, text, \"\", -1), Dirt, \"\", -1),\n",
    "\t\t\t\tText:  text,\n",
    "\t\t\t}\n",
    "\n",
    "\t\t\tallMovements = append(allMovements, mv)\n",
    "\t\t}\n",
    "\n",
    "\t\treturn allMovements, nil\n",
    "\t}\n",
    "\n",
    "\treturn nil, errors.New(\"could not find movements\")\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08a95751",
   "metadata": {},
   "outputs": [],
   "source": [
    "package Crawler\n",
    "\n",
    "import (\n",
    "\t\"errors\"\n",
    "\t\"github.com/antchfx/htmlquery\"\n",
    "\t\"github.com/tebeka/selenium\"\n",
    "\t\"log\"\n",
    "\t\"strings\"\n",
    "\t\"time\"\n",
    ")\n",
    "\n",
    "const (\n",
    "\tbtnPetition      = \"//*[@id=\\\"pbPeticionar\\\"]\"\n",
    "\ttitleActivePole  = \"Polo ativo\"\n",
    "\ttitlePassivePole = \"Polo passivo\"\n",
    "\ttitleOthersPole  = \"Outras participações \"\n",
    "\txpathTitleInit   = \"/html/body/span/main/div/div/div/form/div/div/div[2]/div/div/section\"\n",
    "\txpathNameInit    = \"/div/div[2]/div/div/ng-include/div/div/div/div/div\"\n",
    "\txpathName        = \"/span[1]\"\n",
    "\txpathDocument    = \"/span[2]\"\n",
    ")\n",
    "\n",
    "type Poles struct {\n",
    "\tActive  []Part\n",
    "\tPassive []Part\n",
    "\tOther   []Part\n",
    "}\n",
    "\n",
    "type Part struct {\n",
    "\tType     string\n",
    "\tName     string\n",
    "\tDocument string\n",
    "}\n",
    "\n",
    "func getLawsuitPoles(driver selenium.WebDriver) (Poles, error) {\n",
    "\tbtnViewDocuments, err := driver.FindElement(selenium.ByXPATH, btnPetition)\n",
    "\tif err != nil {\n",
    "\t\treturn Poles{}, errors.New(\"btnPetition not found\")\n",
    "\t}\n",
    "\terr = btnViewDocuments.Click()\n",
    "\n",
    "\ttime.Sleep(4 * time.Second)\n",
    "\n",
    "\tpageSource, err := driver.PageSource()\n",
    "\tif err != nil {\n",
    "\t\treturn Poles{}, errors.New(\"could not get page source\")\n",
    "\t}\n",
    "\n",
    "\thtmlPgSrc, err := htmlquery.Parse(strings.NewReader(pageSource))\n",
    "\tif err != nil {\n",
    "\t\treturn Poles{}, errors.New(\"could not convert string to node html\")\n",
    "\t}\n",
    "\n",
    "\tvar activePole []Part\n",
    "\tvar passivePole []Part\n",
    "\tvar otherPole []Part\n",
    "\texistCard := htmlquery.Find(htmlPgSrc, xpathTitleInit)\n",
    "\n",
    "\tif len(existCard) > 0 {\n",
    "\t\tcards := htmlquery.Find(htmlPgSrc, xpathTitleInit)\n",
    "\n",
    "\t\tfor i := 0; i < len(cards); i++ {\n",
    "\t\t\ttitle := htmlquery.FindOne(cards[i], \"/div/div[1]/h3\")\n",
    "\t\t\tif htmlquery.InnerText(title) == titleActivePole {\n",
    "\t\t\t\tnames := htmlquery.Find(cards[i], xpathNameInit)\n",
    "\t\t\t\tfor _, name := range names {\n",
    "\t\t\t\t\tvar n string\n",
    "\t\t\t\t\tvar d string\n",
    "\t\t\t\t\texistName := htmlquery.Find(name, xpathName)\n",
    "\t\t\t\t\tif len(existName) > 0 && !strings.Contains(htmlquery.InnerText(htmlquery.FindOne(name, xpathName)), \"Incluir no polo contrário\") {\n",
    "\t\t\t\t\t\tn = htmlquery.InnerText(htmlquery.FindOne(name, xpathName))\n",
    "\t\t\t\t\t\texistDocument := htmlquery.Find(name, xpathDocument)\n",
    "\t\t\t\t\t\tif len(existDocument) > 0 {\n",
    "\t\t\t\t\t\t\td = htmlquery.InnerText(htmlquery.FindOne(name, xpathDocument))\n",
    "\t\t\t\t\t\t}\n",
    "\t\t\t\t\t\tactivePole = append(activePole, Part{\n",
    "\t\t\t\t\t\t\tType:     \"Ativo\",\n",
    "\t\t\t\t\t\t\tName:     n,\n",
    "\t\t\t\t\t\t\tDocument: d,\n",
    "\t\t\t\t\t\t})\n",
    "\t\t\t\t\t}\n",
    "\n",
    "\t\t\t\t}\n",
    "\t\t\t}\n",
    "\t\t\tif htmlquery.InnerText(title) == titlePassivePole {\n",
    "\t\t\t\tnames := htmlquery.Find(cards[i], xpathNameInit)\n",
    "\t\t\t\tfor _, name := range names {\n",
    "\t\t\t\t\tvar n string\n",
    "\t\t\t\t\tvar d string\n",
    "\t\t\t\t\texistName := htmlquery.Find(name, xpathName)\n",
    "\t\t\t\t\tif len(existName) > 0 && !strings.Contains(htmlquery.InnerText(htmlquery.FindOne(name, xpathName)), \"Incluir no polo contrário\") {\n",
    "\t\t\t\t\t\tn = htmlquery.InnerText(htmlquery.FindOne(name, xpathName))\n",
    "\t\t\t\t\t\texistDocument := htmlquery.Find(name, xpathDocument)\n",
    "\t\t\t\t\t\tif len(existDocument) > 0 {\n",
    "\t\t\t\t\t\t\td = htmlquery.InnerText(htmlquery.FindOne(name, xpathDocument))\n",
    "\t\t\t\t\t\t}\n",
    "\t\t\t\t\t\tpassivePole = append(passivePole, Part{\n",
    "\t\t\t\t\t\t\tType:     \"Passivo\",\n",
    "\t\t\t\t\t\t\tName:     n,\n",
    "\t\t\t\t\t\t\tDocument: d,\n",
    "\t\t\t\t\t\t})\n",
    "\t\t\t\t\t}\n",
    "\n",
    "\t\t\t\t}\n",
    "\t\t\t}\n",
    "\t\t\tif strings.Contains(htmlquery.InnerText(title), titleOthersPole) {\n",
    "\t\t\t\tnames := htmlquery.Find(cards[i], xpathNameInit)\n",
    "\t\t\t\tfor _, name := range names {\n",
    "\t\t\t\t\tvar n string\n",
    "\t\t\t\t\tvar d string\n",
    "\t\t\t\t\texistName := htmlquery.Find(name, xpathName)\n",
    "\n",
    "\t\t\t\t\tif len(existName) > 0 && !strings.Contains(htmlquery.InnerText(htmlquery.FindOne(name, xpathName)), \"Incluir no polo contrário\") {\n",
    "\t\t\t\t\t\tn = htmlquery.InnerText(htmlquery.FindOne(name, xpathName))\n",
    "\t\t\t\t\t\texistDocument := htmlquery.Find(name, xpathDocument)\n",
    "\t\t\t\t\t\tif len(existDocument) > 0 {\n",
    "\t\t\t\t\t\t\td = htmlquery.InnerText(htmlquery.FindOne(name, xpathDocument))\n",
    "\t\t\t\t\t\t}\n",
    "\t\t\t\t\t\totherPole = append(otherPole, Part{\n",
    "\t\t\t\t\t\t\tType:     \"Outros\",\n",
    "\t\t\t\t\t\t\tName:     n,\n",
    "\t\t\t\t\t\t\tDocument: d,\n",
    "\t\t\t\t\t\t})\n",
    "\t\t\t\t\t}\n",
    "\n",
    "\t\t\t\t}\n",
    "\t\t\t}\n",
    "\t\t}\n",
    "\t} else {\n",
    "\t\tlog.Println(\"no parts were found\")\n",
    "\t\treturn Poles{}, nil\n",
    "\t}\n",
    "\n",
    "\treturn Poles{activePole, passivePole, otherPole}, nil\n",
    "}"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
